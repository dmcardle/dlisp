;;;;
;;;; The DLISP standard library.
;;;;

(def not (quote '(p) (cond p nil true)))
(def and (quote '(p q) (cond p q p)))
(def or (quote '(a b) (cond a a b)))

;; A casting function from truthy values to `nil` or `false`. Note that this is
;; a second-order function because it invokes `not`, which is defined right here
;; in the stdlib!
(def bool (quote '(p) (not (not p))))

;; Multiplication of positive integers.
;;
;; TODO: Design a scheme for handling bad inputs.
(def mul (quote '(a b) (_mul a b 0)))

;; Tail-recursive helper function for `mul`. Returns n * m + sum.
(def _mul (quote '(n m sum)
                 ;; Although (not n) would be sufficient, we can also
                 ;; short-circuit when m is zero as an optimization.
                 (cond (or (not n) (not m))
                       sum
                       (_mul (sub n 1)
                             m
                             (add sum m)))))

;; Factorial of positive integers.
(def fact (quote '(n)
                 (cond (not n)
                       1
                       (mul n (fact (sub n 1))))))

;; A very horrible equality check for positive integers.
(def pos_eq (quote '(a b)
                   (cond (and (not a) (not b))
                         true
                         (cond (or (and (not a) b)
                                   (and a (not b)))
                               nil
                               (pos_eq (sub a 1) (sub b 1))))))

;; Given positive integers `start` and `end`, returns the list of intermediate
;; values. Includes `start`, but excludes `end`.
(def range (quote '(start end)
                  (cond (pos_eq start end)
                        '()
                        (cons start
                              (range (add start 1)
                                     end)))))

(def map (quote '(f xs)
                (cond xs
                      (cons (f (car xs)) (map f (cdr xs)))
                      '())))

(def filter (quote '(f xs)
                   (cond xs
                         (cond (f (car xs))
                               (cons (car xs) (filter f (cdr xs)))
                               (filter f (cdr xs)))
                         '())))
